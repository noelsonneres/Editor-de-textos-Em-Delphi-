unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtDlgs, Vcl.StdCtrls,
  System.UITypes,
  RichEdit, Vcl.ComCtrls, Vcl.Printers,
  MidasLib, Vcl.Buttons, Vcl.ExtCtrls, Vcl.Imaging.pngimage, System.Actions,
  Vcl.ActnList, System.ImageList, Vcl.ImgList, Vcl.Menus, RxRichEd, ClipBrd;

type
  TFormPrincipal = class(TForm)
    OpenTextFileDialog1: TOpenTextFileDialog;
    SaveDialog1: TSaveDialog;
    PrintDialog1: TPrintDialog;
    ColorDialog1: TColorDialog;
    ImageList1: TImageList;
    FontDialog1: TFontDialog;
    Panel2: TPanel;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    SpeedButton5: TSpeedButton;
    SpeedButton6: TSpeedButton;
    SpeedButton7: TSpeedButton;
    SpeedButton8: TSpeedButton;
    SpeedButton9: TSpeedButton;
    SpeedButton10: TSpeedButton;
    SpeedButton11: TSpeedButton;
    Panel1: TPanel;
    Edit1: TEdit;
    SpeedButton13: TSpeedButton;
    SpeedButton14: TSpeedButton;
    SpeedButton15: TSpeedButton;
    PopupMenu1: TPopupMenu;
    Copiar1: TMenuItem;
    Colar1: TMenuItem;
    Recortar1: TMenuItem;
    Cordapagina1: TMenuItem;
    Cordafonte1: TMenuItem;
    SpeedButton16: TSpeedButton;
    SpeedButton12: TSpeedButton;
    RxRichEdit1: TRxRichEdit;
    PrinterSetupDialog1: TPrinterSetupDialog;
    PageSetupDialog1: TPageSetupDialog;
    Edit2: TEdit;
    SpeedButton17: TSpeedButton;
    SpeedButton18: TSpeedButton;
    SpeedButton19: TSpeedButton;
    SpeedButton20: TSpeedButton;
    procedure Button5Click(Sender: TObject);
    Procedure FindReplace(const Enc, subs: String; Var Texto: TRxRichEdit);
    procedure acAbrirExecute(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    procedure SpeedButton4Click(Sender: TObject);
    procedure SpeedButton5Click(Sender: TObject);
    procedure SpeedButton6Click(Sender: TObject);
    procedure SpeedButton7Click(Sender: TObject);
    procedure SpeedButton8Click(Sender: TObject);
    procedure SpeedButton9Click(Sender: TObject);
    procedure SpeedButton10Click(Sender: TObject);
    procedure SpeedButton11Click(Sender: TObject);
    procedure SpeedButton12Click(Sender: TObject);
    procedure SpeedButton13Click(Sender: TObject);
    procedure SpeedButton14Click(Sender: TObject);
    procedure Copiar1Click(Sender: TObject);
    procedure Colar1Click(Sender: TObject);
    procedure Recortar1Click(Sender: TObject);
    procedure Cordapagina1Click(Sender: TObject);
    procedure Cordafonte1Click(Sender: TObject);
    procedure SpeedButton15Click(Sender: TObject);
    procedure SpeedButton16Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure SpeedButton17Click(Sender: TObject);
    procedure SpeedButton18Click(Sender: TObject);
    procedure SpeedButton19Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure SpeedButton20Click(Sender: TObject);
  private
    { Private declarations }
    procedure PrintStrings(Strings: TStrings);
    procedure SetRichEditMargins(const mLeft, mRight, mTop, mBottom: extended;
      const re: TRxRichEdit);
    procedure SubstituirTexto(Rich: TRxRichEdit;
      TextoAntigo, TextoNovo: string);
    function CurrText: TRxTextAttributes;
    procedure focusEditor;

  var
    FTexto: WideString;
    FSalvar: boolean;
    FCaminhoArquivo: string;
    FOpenPictureDialog: TOpenPictureDialog;
  public
    { Public declarations }
  end;

var
  FormPrincipal: TFormPrincipal;

implementation

{$R *.dfm}

procedure TFormPrincipal.acAbrirExecute(Sender: TObject);
begin
  showmessage('Teste');
end;

procedure TFormPrincipal.Button5Click(Sender: TObject);
begin
  RxRichEdit1.Paragraph.Alignment := paCenter;
end;

procedure TFormPrincipal.Colar1Click(Sender: TObject);
begin
  RxRichEdit1.PasteFromClipboard;
end;

procedure TFormPrincipal.Copiar1Click(Sender: TObject);
begin
  RxRichEdit1.CopyToClipboard;
end;

procedure TFormPrincipal.Cordafonte1Click(Sender: TObject);
begin

  if ColorDialog1.Execute then
    RxRichEdit1.SelAttributes.Color := ColorDialog1.Color;

end;

procedure TFormPrincipal.Cordapagina1Click(Sender: TObject);
begin

  if ColorDialog1.Execute then
    RxRichEdit1.Color := ColorDialog1.Color;

end;

function TFormPrincipal.CurrText: TRxTextAttributes;
begin
  if RxRichEdit1.SelLength > 0 then
    Result := RxRichEdit1.SelAttributes
  else
    Result := RxRichEdit1.WordAttributes;
end;

procedure TFormPrincipal.FindReplace(const Enc, subs: String;
  var Texto: TRxRichEdit);
Var
  i, Posicao: Integer;
  Linha: string;
Begin

  For i := 0 to Texto.Lines.Count - 1 do
  begin

    Linha := Texto.Lines[i];
    Repeat
      Posicao := Pos(Enc, Linha);
      If Posicao > 0 then
      Begin
        Delete(Linha, Posicao, Length(Enc));
        Insert(subs, Linha, Posicao);
        Texto.Lines[i] := Linha;
      end;
    until Posicao = 0;

  end;

End;

procedure TFormPrincipal.focusEditor;
begin
  with RxRichEdit1 do
    if CanFocus then
      SetFocus;
end;

procedure TFormPrincipal.FormCreate(Sender: TObject);
begin
  FOpenPictureDialog := TOpenPictureDialog.Create(Self);
end;

procedure TFormPrincipal.FormDestroy(Sender: TObject);
begin
  FOpenPictureDialog.Free;
end;

procedure TFormPrincipal.FormShow(Sender: TObject);
begin
  RxRichEdit1.SelAttributes.Size := 12;
  FSalvar := false;
end;

procedure TFormPrincipal.PrintStrings(Strings: TStrings);
var
  Prn: TextFile;
  i: word;
begin
  AssignPrn(Prn);
  try
    Rewrite(Prn);
    try
      for i := 0 to Strings.Count - 1 do
        writeln(Prn, Strings.Strings[i]);
    finally
      CloseFile(Prn);
    end;
  except
    on EInOutError do
      MessageDLG('Erro imprimindo texto.', mtError, [mbOk], 0);
  end;
end;

procedure TFormPrincipal.Recortar1Click(Sender: TObject);
begin
  RxRichEdit1.CutToClipboard;
end;

procedure TFormPrincipal.SetRichEditMargins(const mLeft, mRight, mTop,
  mBottom: extended; const re: TRxRichEdit);
var
  ppiX, ppiY: Integer;
  spaceLeft, spaceTop: Integer;
  r: TRect;
begin
  // pixels por polegadas
  ppiX := GetDeviceCaps(Printer.Handle, LOGPIXELSX);
  ppiY := GetDeviceCaps(Printer.Handle, LOGPIXELSY);

  // não imprimir margens
  spaceLeft := GetDeviceCaps(Printer.Handle, PHYSICALOFFSETX);
  spaceTop := GetDeviceCaps(Printer.Handle, PHYSICALOFFSETY);

  // calcular as margens
  r.Left := Round(ppiX * mLeft) - spaceLeft;
  r.Right := Printer.PageWidth - Round(ppiX * mRight) - spaceLeft;
  r.Top := Round(ppiY * mTop) - spaceTop;
  r.Bottom := Printer.PageHeight - Round(ppiY * mBottom) - spaceTop;

  // setar as margens
  re.PageRect := r;
end;

procedure TFormPrincipal.SpeedButton10Click(Sender: TObject);
begin
  if not(fsItalic in RxRichEdit1.SelAttributes.Style) then
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style +
      [fsItalic]
  else
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style -
      [fsItalic]
end;

procedure TFormPrincipal.SpeedButton11Click(Sender: TObject);
begin
  if not(fsUnderline in RxRichEdit1.SelAttributes.Style) then
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style +
      [fsUnderline]
  else
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style -
      [fsUnderline]
end;

procedure TFormPrincipal.SpeedButton12Click(Sender: TObject);
var
  MEsq, MDir, MSup, MInf: real;
begin
  { Estilo = RETRATO
    Margem Esquerda = 25
    Margem Direita = 20
    Margem Superior = 20
    Margem Inferior = 20 }

  if PageSetupDialog1.Execute then
  begin

    Printer.Orientation := poPortrait; // vertical

    MEsq := (PageSetupDialog1.MarginLeft / 2.54) / 1000;
    MDir := (PageSetupDialog1.MarginRight / 2.54) / 1000;
    MSup := (PageSetupDialog1.MarginTop / 2.54) / 1000;
    MInf := (PageSetupDialog1.MarginBottom / 2.54) / 1000;

    SetRichEditMargins(MEsq, MDir, MSup, MInf, RxRichEdit1);

    RxRichEdit1.Print('Printing with margins');

  end;
end;


procedure TFormPrincipal.SpeedButton13Click(Sender: TObject);
var
  Posicao: integer;
begin
  Posicao := 1;

  With RxRichEdit1 do
  begin
    Posicao := FindText(Edit1.Text, 0, Length(Text), []);

    SelStart := Posicao;
    SelLength := Length(Edit1.Text);
//        SelText := TextoNovo;

    SetFocus;

  end;
end;

procedure TFormPrincipal.SpeedButton14Click(Sender: TObject);
// var
// i: Integer;
begin

  // i:= pos( edit1.text,RxRichEdit1.Text)-2;
  // RxRichEdit1.SelStart := i;
  // RxRichEdit1.SelLength := length(edit1.text);

  // FindReplace(Edit1.Text, Edit2.Text, RxRichEdit1);

  with RxRichEdit1 do
    ReplaceDialog(SelText, '');
end;

procedure TFormPrincipal.SpeedButton15Click(Sender: TObject);
var
  MEsq, MDir, MSup, MInf: real;
begin
  { Estilo = RETRATO
    Margem Esquerda = 25
    Margem Direita = 20
    Margem Superior = 20
    Margem Inferior = 20 }

  if PageSetupDialog1.Execute then
  begin

    Printer.Orientation := poPortrait; // vertical

    MEsq := (PageSetupDialog1.MarginLeft / 2.54) / 1000;
    MDir := (PageSetupDialog1.MarginRight / 2.54) / 1000;
    MSup := (PageSetupDialog1.MarginTop / 2.54) / 1000;
    MInf := (PageSetupDialog1.MarginBottom / 2.54) / 1000;

    SetRichEditMargins(MEsq, MDir, MSup, MInf, RxRichEdit1);

    if PrintDialog1.Execute then
      RxRichEdit1.Print('Printing with margins');

  end;
end;

procedure TFormPrincipal.SpeedButton16Click(Sender: TObject);
begin

  if SaveDialog1.Execute then
    RxRichEdit1.Lines.SaveToFile(SaveDialog1.FileName);

end;

procedure TFormPrincipal.SpeedButton17Click(Sender: TObject);
begin
  SubstituirTexto(RxRichEdit1, Edit1.Text, Edit2.Text);
  RxRichEdit1.SelStart := 0;
end;

procedure TFormPrincipal.SpeedButton18Click(Sender: TObject);
begin
  RxRichEdit1.Undo;
end;

procedure TFormPrincipal.SpeedButton19Click(Sender: TObject);
begin
  RxRichEdit1.Redo;
end;

procedure TFormPrincipal.SpeedButton1Click(Sender: TObject);
begin
  if OpenTextFileDialog1.Execute then
  begin

    RxRichEdit1.Lines.LoadFromFile(OpenTextFileDialog1.FileName);
    RxRichEdit1.SelectAll;

    RxRichEdit1.Paragraph.FirstIndent := 10;
    RxRichEdit1.Paragraph.LeftIndent := 25;
    RxRichEdit1.Paragraph.RightIndent := 25;

    RxRichEdit1.SelStart := 0;

    FSalvar := true;
    FCaminhoArquivo := OpenTextFileDialog1.FileName;

    FTexto := RxRichEdit1.Lines.Text;

//    RxRichEdit1.DrawEndPage := true;

  end;

end;

procedure TFormPrincipal.SpeedButton20Click(Sender: TObject);
var
  Pict: TPicture;
begin
  with FOpenPictureDialog do begin
    if Execute then begin
      Pict := TPicture.Create;
      try
        Pict.LoadFromFile(FileName);
        Clipboard.Assign(Pict);
        RxRichEdit1.PasteFromClipboard;
      finally
        Pict.Free;
      end;
    end;
  end;
end;

procedure TFormPrincipal.SpeedButton2Click(Sender: TObject);
begin
  RxRichEdit1.Clear;
  FSalvar := false;
end;

procedure TFormPrincipal.SpeedButton3Click(Sender: TObject);
begin
  if FTexto <> RxRichEdit1.Lines.Text then
  begin

    if FSalvar = false then
    begin
      if SaveDialog1.Execute then
        RxRichEdit1.Lines.SaveToFile(SaveDialog1.FileName);
    end
    else
    begin
      RxRichEdit1.Lines.SaveToFile(FCaminhoArquivo);
    end;

  end;

end;

procedure TFormPrincipal.SpeedButton4Click(Sender: TObject);
begin
  if ColorDialog1.Execute then
    RxRichEdit1.SelAttributes.Color := ColorDialog1.Color;
end;

procedure TFormPrincipal.SpeedButton5Click(Sender: TObject);
begin

  FontDialog1.Font.Assign(RxRichEdit1.SelAttributes);

  if FontDialog1.Execute then
    CurrText.Assign(FontDialog1.Font);
  focusEditor;

end;

procedure TFormPrincipal.SpeedButton6Click(Sender: TObject);
begin
  RxRichEdit1.Paragraph.Alignment := paLeftJustify
end;

procedure TFormPrincipal.SpeedButton7Click(Sender: TObject);
begin
  RxRichEdit1.Paragraph.Alignment := paCenter
end;

procedure TFormPrincipal.SpeedButton8Click(Sender: TObject);
begin
  RxRichEdit1.Paragraph.Alignment := paRightJustify;
end;

procedure TFormPrincipal.SpeedButton9Click(Sender: TObject);
begin
  if not(fsBold in RxRichEdit1.SelAttributes.Style) then
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style
      + [fsBold]
  else
    RxRichEdit1.SelAttributes.Style := RxRichEdit1.SelAttributes.Style
      - [fsBold]
end;

procedure TFormPrincipal.SubstituirTexto(Rich: TRxRichEdit;
  TextoAntigo, TextoNovo: string);
var
  Posicao: Integer;
begin
  Posicao := 1;

  With Rich do
    repeat
      Posicao := FindText(TextoAntigo, 0, Length(Text), []);

      if Posicao > 0 then
      begin
        SelStart := Posicao;
        SelLength := Length(TextoAntigo);
        SelText := TextoNovo;

        SetFocus;
        Posicao := 0;
      end;
    until (Posicao <> 0);
end;

end.
